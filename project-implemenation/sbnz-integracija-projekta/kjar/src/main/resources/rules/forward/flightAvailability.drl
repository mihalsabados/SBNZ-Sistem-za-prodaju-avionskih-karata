package rules.forward;

import  com.ftn.sbnz.model.Flight;
import  com.ftn.sbnz.model.Ticket;

import java.util.List;
import  com.ftn.sbnz.dto.ticket.TicketToShowDTO;
import java.lang.Math
import com.ftn.sbnz.model.Discount
import java.util.ArrayList;


global Long flightId

declare TicketAdded
    ticketId: Long
    flightId: Long
    destination: String
end

declare PopularFlight
    flId: Long
    destination: String
end

declare  NoFlightsWithSameDestination
    distance: Integer
end

declare NoFlightsWithSimilarDistance
end

rule "Available seats on a flight"
    when
        $t: Ticket()
        $ticketToShow: TicketToShowDTO(alternativeFlightId == flightId)
        $fl: Flight(id == flightId ,soldTickets.size() < numberOfSeats)
    then
        $fl.getSoldTickets().add($t);
        insert(new TicketAdded($t.getId(), $fl.getId(), $fl.getDestination()));
        System.out.println("RULE6");
        System.out.println("Uspesno kupljeno");
        modify($ticketToShow){setFlightFound(true)}
end


rule "New Ticket added and average occupancy on destination more than 80%"
    when
        TicketAdded($dest: destination)
        $flightList: List() from collect(Flight(destination == $dest))
        Number(doubleValue >= 0.8) from accumulate(
            $fl: Flight($ticketNum: Integer.valueOf(soldTickets.size()), $seatsNum: Integer.valueOf(numberOfSeats)) from $flightList,
            average($ticketNum.doubleValue() / $seatsNum.doubleValue())
        )
        $flight: Flight() from $flightList
    then
        modify($flight) {
                    setPopular(true)
                }

        insert(new PopularFlight($flight.getId(), $flight.getDestination()));
        System.out.println("RULE7");
end


rule "Popular flight with distance more than 8000km"
    when
        $ticket: Ticket()
        PopularFlight($flightId: flId == flightId)
        $fl: Flight(id == $flightId , distance > 8000)
        $discount: Discount(name == "Popular flight with over 8000km")
    then
        if ($ticket.getDiscounts() == null) {
                $ticket.setDiscounts(new ArrayList<>(List.of($discount)));
        } else {
            $ticket.getDiscounts().add($discount);
        }
        System.out.println("RULE8");
end


rule "Available seats on the flight with the same destination and different departure"
    when
        $t: Ticket()
        $flightSuggestion: TicketToShowDTO(alternativeFlightId == flightId)
        $fl1: Flight(soldTickets.size() >= numberOfSeats, id == flightId, $desiredDestination: destination,
            $desiredDeparture: departure)
        $fl2: Flight(this != $fl1, soldTickets.size() < numberOfSeats, destination == $desiredDestination,
            departure != $desiredDeparture, $alternativeFlightId: id)
    then
        System.out.println("RULE9");
        modify($flightSuggestion){setAlternativeFlightId($alternativeFlightId)}
        modify($flightSuggestion){setFlightFound(true)}
end


rule "No available seats on the flight with the same destination and different departure"
    when
        $t: Ticket()
        $fl1: Flight(soldTickets.size() >= numberOfSeats, id == flightId, $desiredDestination: destination,
            $desiredDeparture: departure, $distance:distance)
        not Flight(this != $fl1, soldTickets.size() < numberOfSeats, destination == $desiredDestination)
    then
        insert(new NoFlightsWithSameDestination($distance));
        System.out.println("RULE10");
end

rule "No available seats on the flight with the same destination but exists one within 500km and average number of seats / distance ratio >= 5%"
    when
        $flightSuggestion: TicketToShowDTO(alternativeFlightId == flightId)
        NoFlightsWithSameDestination($dist: distance)
        $fl2: Flight(id != flightId, soldTickets.size() < numberOfSeats, Math.abs($dist - distance) <= 500,
        $alternativeFlightId: id, $destination: destination)
        $flightList: List() from collect(Flight(destination == $destination))
        Number(doubleValue >= 0.05) from accumulate(
            $fl: Flight($distance: Integer.valueOf(distance), $seatsNum: Integer.valueOf(numberOfSeats)) from $flightList,
            average($seatsNum.doubleValue() / $distance.doubleValue())
        )
    then
        System.out.println("RULE11");
        System.out.println($dist);
        modify($flightSuggestion){setAlternativeFlightId($alternativeFlightId)}
        modify($flightSuggestion){setFlightFound(true)}
end

rule "No available seats on the flight with the same destination and doesn't exist any within 500km"
    when
        $flightSuggestion: TicketToShowDTO(alternativeFlightId == flightId)
        NoFlightsWithSameDestination($dist: distance)
        not Flight(id != flightId, soldTickets.size() < numberOfSeats, Math.abs($dist - distance) <= 500)
    then
        System.out.println("RULE12");
        insert(new NoFlightsWithSimilarDistance());
end

rule "No available seats on the flight within 500km, but exists popular flight"
    when
        NoFlightsWithSimilarDistance()
        $flightSuggestion: TicketToShowDTO(alternativeFlightId == flightId)
        $fl2: Flight(id != flightId, soldTickets.size() < numberOfSeats, popular == true, $alternativeFlightId: id)
    then
        System.out.println("RULE13");
        modify($flightSuggestion){setAlternativeFlightId($alternativeFlightId)}
        modify($flightSuggestion){setFlightFound(true)}
end

rule "No popular flights, search failed"
    when
        NoFlightsWithSimilarDistance()
        $flightSuggestion: TicketToShowDTO(alternativeFlightId == flightId)
        not Flight(popular == true)
    then
        System.out.println("RULE14");
        modify($flightSuggestion){setFlightFound(false)}
end

