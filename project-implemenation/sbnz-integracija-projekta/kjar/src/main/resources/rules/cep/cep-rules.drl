package rules.cep;
import com.ftn.sbnz.model.Ticket;
import com.ftn.sbnz.model.Flight;
import com.ftn.sbnz.model.User;
import java.util.List;
import java.util.ArrayList;

global Long flightId

rule "2 Tickets with same content from the same customer"
    when
        $t1: Ticket($payer: payer, $passenger: passenger, $ticketType: ticketType)
        $flight: Flight(id == flightId, $soldTickets: soldTickets)
        $t2: Ticket(
            payer == $payer,
            passenger == $passenger,
            ticketType == $ticketType
        ) from $soldTickets
    then
        System.out.println("RULE 15");
end

//rule "2 Tickets with same content from the same customer"
//    when
//        $t1: Ticket(
//            $payer: payer)
//        $t2: Ticket(
//            this != $t1,
//            this meets[1h] $t1,
//            payer == $payer
//        )
//    then
//        System.out.println("RULE 15");
//end

//declare SuspiciousCustomerEvent
//    @role(event)
//    customerId: Long
//    reason: String
//end
//
//declare AlarmTriggered
//    customerId: Long
//end
//
//rule "More than 10 transactions in an hour from one client"
//    when
//        $t1: TransactionEvent($cId: customerId)
//        Number(intValue >= 10) from accumulate(
//            $t2: TransactionEvent(
//                this != $t1,
//                customerId == $cId,
//                this meets[1h] $t1
//            ),
//            count($t2)
//        )
//        not (SuspiciousCustomerEvent(customerId == $cId, reason == "Many transactions"))
//    then
//        insert(new SuspiciousCustomerEvent($cId, "Many transactions"));
//end
//
//rule "More than 1 transaction of 200 dollars in an hour from the same client"
//    when
//        $t1: TransactionEvent($cId: customerId, totalAmount >= 200.0)
//        $t2: TransactionEvent(
//            this != $t1,
//            this meets[1h] $t1,
//            customerId == $cId,
//            totalAmount >= 200.0
//        )
//        not (SuspiciousCustomerEvent(customerId == $cId, reason == "Two large transactions"))
//    then
//        insert(new SuspiciousCustomerEvent($cId, "Two large transactions"));
//end
//
//rule "More than 3 suspicious cases in the day and we warn the owner"
//    when
//        SuspiciousCustomerEvent($cId: customerId)
//        not (AlarmTriggered(customerId == $cId))
//        Number(intValue >= 2) from accumulate(
//            $s: SuspiciousCustomerEvent(customerId == $cId),
//            count($s)
//        )
//    then
//        //warn the owner
//        System.out.println("WARNING: Suspicious fraud case. Client " + $cId);
//        insert(new AlarmTriggered($cId));
//end
//
//
//rule "More than 10 transactions in an hour from small client portal"
//    when
//        $t1: TransactionEvent($cId: customerId) from entry-point "small-client-portal"
//        Number(intValue >= 10) from accumulate(
//            $t2: TransactionEvent(
//                this != $t1,
//                customerId == $cId,
//                this meets[1h] $t1
//            ) from entry-point "small-client-portal",
//            count($t2)
//        )
//        not (SuspiciousCustomerEvent(customerId == $cId, reason == "Many transactions"))
//    then
//        insert(new SuspiciousCustomerEvent($cId, "Many transactions"));
//end
//
//rule "More than 100 transactions in an hour from big client portal"
//    when
//        $t1: TransactionEvent($cId: customerId) from entry-point "big-client-portal"
//        Number(intValue >= 100) from accumulate(
//            $t2: TransactionEvent(
//                this != $t1,
//                customerId == $cId,
//                this meets[1h] $t1
//            ) from entry-point "big-client-portal",
//            count($t2)
//        )
//        not (SuspiciousCustomerEvent(customerId == $cId, reason == "Many transactions"))
//    then
//        insert(new SuspiciousCustomerEvent($cId, "Many transactions"));
//end
